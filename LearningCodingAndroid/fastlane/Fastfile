# Customise this file, documentation can be found here:
# https://docs.fastlane.tools/actions/
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.60.0"

default_platform :android

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :hockeyapp_prod do
    gradle(
      task: "assemble",
      build_type: "release",
      flavor: "server"
    )
    hockey(
      apk: "app/build/outputs/apk/server/release/app-server-release.apk",
      notes: File.read("../../StoryGameIOS/changelog.txt"),
      notify: "0"
    )
    gradle(
      task: "crashlyticsUploadSymbols",
      build_type: "release",
      flavor: "server"
    )
    # crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Submit a new Beta Build to HockeyApp"
  lane :hockeyapp_dev do
    gradle(
      task: "assemble",
      build_type: "debug",
      flavor: "server"
    )
    hockey(
      apk: "app/build/outputs/apk/server/debug/app-server-debug.apk",
      notes: File.read("../../StoryGameIOS/changelog.txt"),
      notify: "0"
    )
    gradle(
      task: "crashlyticsUploadSymbols",
      build_type: "debug",
      flavor: "server"
    )
    # crashlytics

    # sh "your_script.sh"
    # You can also use other beta testing services here
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do
    gradle(
      task: "assemble",
      build_type: "release",
      flavor: "server"
    )
    supply(
      apk: "app/build/outputs/apk/server/release/app-server-release.apk",
      track: "internal",
      json_key: "/Users/jenkins/Documents/GooglePlayPublishingKey.json",
      skip_upload_metadata: "1",
      skip_upload_images: "1",
      skip_upload_screenshots: "1"
    )
    gradle(
      task: "crashlyticsUploadSymbols",
      build_type: "release",
      flavor: "server"
    )
  end

  desc "Deploy a Flexion version to the HockeyApp"
  lane :hockeyapp_flexion_prod do
    gradle(
      task: "assemble",
      build_type: "flexion",
      flavor: "server"
    )
    hockey(
      apk: "app/build/outputs/apk/server/flexion/app-server-flexion.apk",
      notes: File.read("../../StoryGameIOS/changelog.txt"),
      notify: "0"
    )
    gradle(
      task: "crashlyticsUploadSymbols",
      build_type: "flexion",
      flavor: "server"
    )
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
